# A script to fetch new content.
# Run this using bin/fetch

set -euxo pipefail

cd ./content

# TODO: Fetch only if not fetched in last 30 minutes or so, to avoid API rate limit.
wget https://old.reddit.com/r/TheMotte/.json -O TheMotte.json

# Filter out relevant data
cat TheMotte.json | jq '.data.children | map (select (.data.title | contains("Culture War Roundup"))) | first' > CW-meta.json
cat TheMotte.json | jq '.data.children | map (select (.data.title | contains("Wellness Wednesday for"))) | first' > WW-meta.json
cat TheMotte.json | jq '.data.children | map (select (.data.title | contains("Small-Scale Question Sunday"))) | first' > SQ-meta.json
cat TheMotte.json | jq '.data.children | map (select (.data.title | contains("Friday Fun Thread"))) | first' > FF-meta.json

# Get the original threads
CW_JSON_URL="$(cat CW-meta.json | jq -r .data.url).json?depth=1"
wget $CW_JSON_URL -O CW.json
WW_JSON_URL="$(cat WW-meta.json | jq -r .data.url).json?depth=1"
wget $WW_JSON_URL -O WW.json
SQ_JSON_URL="$(cat SQ-meta.json | jq -r .data.url).json?depth=1"
wget $SQ_JSON_URL -O SQ.json
FF_JSON_URL="$(cat FF-meta.json | jq -r .data.url).json?depth=1"
wget $FF_JSON_URL -O FF.json

# Clean up
# - Ignore dist==1 which is the submission text.
cat CW.json \
        | jq 'map (select (.data.dist != 1)) | first' \
        | jq '.data.children' \
        | jq 'map(select (.data.author != "AutoModerator" and .kind == "t1") | {kind: .kind, id: .data.id, author: .data.author, score: .data.score, createdUtc: .data.created_utc, body: .data.body, permalink: .data.permalink})' \
        > CW-sanitizied.json

cat WW.json \
        | jq 'map (select (.data.dist != 1)) | first' \
        | jq '.data.children' \
        | jq 'map(select (.data.author != "AutoModerator" and .kind == "t1") | {kind: .kind, id: .data.id, author: .data.author, score: .data.score, createdUtc: .data.created_utc, body: .data.body, permalink: .data.permalink})' \
        > WW-sanitizied.json

cat SQ.json \
        | jq 'map (select (.data.dist != 1)) | first' \
        | jq '.data.children' \
        | jq 'map(select (.data.author != "AutoModerator" and .kind == "t1") | {kind: .kind, id: .data.id, author: .data.author, score: .data.score, createdUtc: .data.created_utc, body: .data.body, permalink: .data.permalink})' \
        > SQ-sanitizied.json

cat FF.json \
        | jq 'map (select (.data.dist != 1)) | first' \
        | jq '.data.children' \
        | jq 'map(select (.data.author != "AutoModerator" and .kind == "t1") | {kind: .kind, id: .data.id, author: .data.author, score: .data.score, createdUtc: .data.created_utc, body: .data.body, permalink: .data.permalink})' \
        > FF-sanitizied.json

# BLR
BLR_JSON_URL=https://old.reddit.com$(cat CW.json \
        | jq 'map (select (.data.dist != 1)) | first' \
        | jq '.data.children' \
        | jq -r 'map(select (.data.author == "AutoModerator" and .kind == "t1")) | first | .data.permalink').json?depth=2
wget $BLR_JSON_URL -O BLR.json

(cat BLR.json \
        | jq 'map (select (.data.dist != 1)) | first' \
        | jq '.data.children | first | .data.replies.data.children'  \
        | jq 'map(select (.data.author != "AutoModerator" and .kind == "t1") | {kind: .kind, id: .data.id, author: .data.author, score: .data.score, createdUtc: .data.created_utc, body: .data.body, permalink: .data.permalink})' \
        > BLR-sanitizied.json) || (
        echo 'No BLR entries'; 
        echo '[]' > BLR-sanitizied.json
        )